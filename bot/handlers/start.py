from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from keyboards.main_menu import main_menu
from database.db_utils import get_db_connection

router = Router()

@router.message(F.text == "/start")
async def cmd_start(message: Message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    connection = get_db_connection()
    cursor = connection.cursor()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –µ–≥–æ telegram_id
        cursor.execute("SELECT username, email FROM core_app_user WHERE telegram_id = ?", (user_id,))
        user = cursor.fetchone()

        if user:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω
            text = (
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω —Ü–≤–µ—Ç–æ–≤, {first_name}! üå∏\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            await message.answer(text, reply_markup=main_menu())
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ username –∏ email
            text = (
                "–ú—ã –Ω–µ –Ω–∞—à–ª–∏ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à username –∏ email, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –Ω–∞ —Å–∞–π—Ç–µ, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: username, email@example.com"
            )
            await message.answer(text)
    finally:
        if connection:
            connection.close()


@router.message(F.text.contains(","))
async def handle_user_data(message: Message):
    connection = get_db_connection()
    cursor = connection.cursor()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        user_data = message.text.split(",")
        if len(user_data) != 2:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ username –∏ email —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: username, email@example.com")
            return

        username = user_data[0].strip()
        email = user_data[1].strip()
        telegram_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º username –∏ email
        cursor.execute(
            "SELECT id FROM core_app_user WHERE username = ? AND email = ?",
            (username, email),
        )
        user = cursor.fetchone()

        if user:
            # –û–±–Ω–æ–≤–ª—è–µ–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute(
                "UPDATE core_app_user SET telegram_id = ? WHERE id = ?",
                (telegram_id, user[0]),
            )
            connection.commit()

            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –≤—ã–≤–æ–¥–æ–º –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            text = (
                f"–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω –∏ –æ–±–Ω–æ–≤–ª–µ–Ω, {message.from_user.first_name}! üå∏\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            await message.answer(text, reply_markup=main_menu())
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏–ª–∏ –≤—ã—Ö–æ–¥
            text = (
                "–ú—ã –Ω–µ –Ω–∞—à–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º username –∏ email. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ –∏–ª–∏ –≤—ã–π—Ç–∏ –∏–∑ –±–æ—Ç–∞:"
            )
            registration_keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", url="http://127.0.0.1:8000/register/")],
                    [InlineKeyboardButton(text="–í—ã—Ö–æ–¥", callback_data="exit_bot")]
                ]
            )
            await message.answer(text, reply_markup=registration_keyboard)
    finally:
        if connection:
            connection.close()


@router.callback_query(F.data == "exit_bot")
async def exit_bot(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –±–æ—Ç. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—Ç–∏—Ç–µ! üëã")



